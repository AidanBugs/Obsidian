---
format: pdf
---

# 1
## A
Prove if $L_1 \in P$ then $\bar{L_1}\in P$

> Proof
>
> If $L_1\in P$ then $\exists k$ s.t. $L\in TIME(n^k)$, that is, $L_1$ is decided by a deterministic machine in polynomial time. 
>
> Since $L_1\in TIME(n^k)$, then the max of $t_m(n)$ of $x\in L_1$ and $t_m(n)$ of $x\notin L_1$ is $n^k$. This means a TM $M$ decides $L_1$ in polynomial time.
>
> We can create a 3 tape machine $M'$ that flips the output of $M$ on $x$ by running $M$ on tape 2 and keeping track of the state on tape 3. Once $M$ finishes $M'$ accepts if 
>
> As discussed, running $M$ will be $O(n^k)$ time. Reading the final state of $M$ would be $O(n)$ time (where $n$ is length of tape 3). So final runtime is $O(n^k)$, thus $M'\in t_m(n^k)$.
>
> We know $M'$ decides $\bar{L_1}$ because for $x\in \bar{L_1}$, $M$ rejects so $M'$ accepts and for $x\notin \bar{L_1}$, $M$ accepts so $M'$ rejects.
>
> Thus since $M'$ decides $\bar{L_1}$ and $M'\in t_m(n^k)$ then $\bar{L_1}\in TIME(n^k)$ so $\bar{L_1}\in P$

## B
Explain why the techinque you used in part a fails to prove $L_1\in NP \rightarrow \bar{L_1}\in NP$

> The proof would need to prove there exists a verifier for $\bar{L_1}$ which is not present in part A. The techinque used in part A determined the runtime of our machine whereas this proof for $NP$ would need to show there is a verifier $V\in P$ for $\bar{L_1}$

## C
Prove $(L_1\in P \land L_2\in P)\rightarrow L_1\circ L_2 \in P$

> Proof
>
> If $L_1\in P \land L_2\in P$ then $\exists M_1,M_2$ that run in polynomial time that decide $L_1,L_2$.
>
> Lets create a TM $M_3$ to decide $L_1\circ L_2$ and prove that it decides the concatenation in polynomial time.
>
> $M_3$ will be a 

## D
Prove $(L_1\in NP \land L_2\in NP)\rightarrow L_1\circ L_2 \in NP$

# 2
## A
Prove that $SUBGRAPH ISOMORPHISM \in NP$ (show $\exist V\in P$)

## B
Prove $HAMILTONIAN \leq_p SUBGRAPH ISOMORPHISM$

# 3
Prove MAJORITY-SAT is NP-complete

> Prove $3-SAT \leq_p MAJORITY-SAT$
>
> We can map each clause in $3-SAT$ which consists of literals $a,b,c$ to a new clause in MAJORITY-SAT which consists of literals $a,b,c,x,y$, where $x,y$ are new literals not in our $3-SAT$ problem. 
>
> Since $x,y$ are new literals, they can be $T/F$ unlike $a,b,c$ which are $T$ iff they are $T$ in $3-SAT$.
>
> Proof:
>
> If $F\in 3-SAT$ then $f(F)\in MAJORITY-SAT$
>
> If $F\in 3-SAT$ then $\exists$ assignments where each clause is true.
>
> This means for all clauses in $F$, at least one literal is true.
>
> Then our CNF for $MAJORITY-SAT$ ($f(F)$) has at least one literal from all clauses in $F$ true.
>
> This means $f(F)\in MAJORITY-SAT$ because all clauses in $F$ have at least one true literal, so each clause in $MAJORITY-SAT$ have at least one true literal besides $x,y$. If $x,y$ are true then that clause will have majority true because we have one true literal from $F$ and $x,y$ are true.
>
> Therefore, if $F\in 3-SAT$ then $f(F)\in MAJORITY-SAT$
>
> If $F\notin 3-SAT$ then $f(F)\notin MAJORITY-SAT$
>
> If $F\notin 3-SAT$ then there exists at least one clause in $F$ that is false. That means this clause has all false for the literals.
>
> For $f(F)$ that means that this clause will have 3 false literals from $F$ and $x,y$ which can be true or false. Even if both $x,y$ are true, we will not have a majority true for this clause. Meaning $f(F)\notin MAJORITY-SAT$
>
> Therefore if $F\notin 3-SAT$ then $f(F)\notin MAJORITY-SAT$
>
> As such, our clause in $3-SAT$ is true iff our clause in $MAJORITY-SAT$ is true.

# 4
Prove the 0-1 integer programming problem is NP-complete

> Prove $SAT\leq_p INT$
>
> For our function, each literal in $SAT$ matches to one $x$ variable in $INT$ and each clause in $SAT$ matches to one linear inequality in $INT$.
>
> Our function $f$ makes a set of linear equations mapping each literal $l_i$ to a variable $x_i$. Then all $b_1...b_m$ are equal to $-1$. For coeffecients, $a_{i,j}=-1$ if $l_i$ is a literal in the $m$th clause, and $a_{i,j}=0$ otherwise.
